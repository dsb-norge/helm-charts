apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
  namespace: {{ .Release.Namespace }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $val := .Values.deploymentAnnotations }}
      {{ $key }}: {{ $val | quote }}
      {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-app
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-app
        app.kubernetes.io/name: {{ .Values.dashboard.name | default .Release.Name }}
        app.kubernetes.io/version: {{ .Values.tag }}
        app.kubernetes.io/component: {{ .Values.dashboard.component | default "API" }}
        app.kubernetes.io/part-of: {{ .Values.dashboard.partOf | default .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/created-by: {{ .Values.dashboard.createdBy | default .Release.Service }}
        helm.sh/chart-name: {{ .Chart.Name }}
        helm.sh/chart-version: {{ .Chart.Version | replace "+" "_" }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      annotations:
        {{- /*
        protected pod annotations:
          checksum: Required for proper pod creation, see below
        */}}
        {{- $protectedAnnotations := dict   "checksum"              (print "chart-version=" .Chart.Version "_config-hash=" (.Values | toString | sha256sum) ) }}
        {{- /*
        Final pod annotations are the result of proteced merged with overrides, where protected takes precedence */}}
        {{- $podAnnotations := .Values.podAnnotations }} {{- /* <-- Required to define as variable to support 'podAnnotations: null' */}}
        {{- $merged := mustMergeOverwrite $podAnnotations $protectedAnnotations }}
        {{- range $key, $val := $merged }}
        {{- if $key | eq "checksum" }}
        # checksum anntotation:
        #   We change this annotation on change in chart or parameters, to force re-create of pods (to pick up config changes etc)
        #   We create a string based on the chart version, and the resolved configuration values.
        #   See https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments{{- end }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Release.Name }}-service-account
      nodeSelector:
        NodePool: workers
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ .Release.Name }}-app
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Release.Name }}-container
          image: "{{ .Values.image }}:{{ .Values.tag }}"
          {{- if .Values.imagePullPolicy }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- end }}
          # Sleep before shutdown to finish requests, as suggested here:
          # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#cloud-deployment-kubernetes
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 10" ]
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.application_actuator_port }}
            initialDelaySeconds: 15
            periodSeconds: {{ .Values.liveness_period_seconds }}
            failureThreshold: {{ .Values.liveness_failure_threshold }}
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.application_actuator_port }}
            initialDelaySeconds: 10
            periodSeconds: {{.Values.readiness_period_seconds }}
            failureThreshold: {{ .Values.readiness_failure_threshold }}
          resources:
            requests:
              memory: {{ .Values.memory_request }}
              cpu: {{ .Values.cpu_request }}
            limits:
              memory: {{ .Values.memory_limit }}
              cpu: {{ .Values.cpu_limit }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.springProfiles | quote }}
            {{- if (not (eq (toString .Values.prometheus_enabled) "false")) }}
            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: {{ .Values.prometheus_enabled | quote }}
            {{- end }}
            {{- if .Values.websocket.enabled }}
            - name: SPRING_RSOCKET_SERVER_PORT
              value: {{ .Values.websocket.port | quote }}
            - name: SPRING_RSOCKET_SERVER_TRANSPORT
              value: "websocket"
            - name: SPRING_RSOCKET_SERVER_MAPPING_PATH
              value: "/socket"
            {{- end }}
            {{- if .Values.database_container.enabled }}
            - name: DATABASE_CONTAINER_USER
              value: {{ .Values.database_container.user | quote }}
            - name: DATABASE_CONTAINER_PASSWORD
              value: {{ .Values.database_container.password | quote }}
            - name: DATABASE_CONTAINER_HOST_AND_PORT
              value: "{{ .Release.Name }}-db-svc:1433"
            - name: DATABASE_CONTAINER_DATABASE
              value: {{ .Values.database_container.database | quote }}
            {{- end }}
            {{- range $name, $value := .Values.certificates }}
            - name: {{ regexReplaceAll "-" $name "_" | upper }}_CERTIFICATE_PATH
              value: {{ default "/certificates" $value.mountPath  }}/{{ $value.fileName  }}
            {{- end }}
            {{- range $name, $value := .Values.mountedConfig }}
            - name: {{ regexReplaceAll "-" $name "_" | upper }}_CONFIG_PATH
              value: {{ default "/config" $value.mountPath  }}/{{ $value.fileName  }}
            {{- end }}
            {{- if .Values.java_opts }}
            - name: JAVA_OPTS
              value: {{ .Values.java_opts | quote }}
            {{- end }}
            {{- if .Values.jvm_head_room }}
            - name: BPL_JVM_HEAD_ROOM
              value: {{ .Values.jvm_head_room | quote }}
            {{- end }}
          envFrom:
          {{- range .Values.secretRefs }}
            - secretRef:
                name: {{ . | quote }}
          {{- end }}
          {{- range $name, $value := .Values.certificates }}
            - secretRef:
                name: {{ $name }}-info
          {{- end }}
          # We place config AFTER secrets, to more easily override with dummy values during development:
          {{- range .Values.configMapRefs }}
            - configMapRef:
                name: {{ . | quote }}
          {{- end }}
          {{- if .Values.config  }}
            - configMapRef:
                name: {{ .Release.Name }}-configmap
          {{- end }}
          {{- /* env config from dsb-azure-csi-key-vault-provider */ -}}
          {{- include "dackvp.render-kubernetes-env-config" (list
            .Values.azureKeyVault.vaults
            .Values.azureKeyVault.defaultValues
            .Release.Name) | indent 12 }}
          ports:
            - containerPort: {{ .Values.application_web_port }}
              name: web
            - containerPort: {{ .Values.application_actuator_port }}
              name: actuator
          volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
          {{- range $name, $value := .Values.certificates }}
            - name: {{ $name }}
              mountPath: {{ default "/certificates" $value.mountPath }}
              readOnly: true
          {{- end }}
          {{- range $name, $value := .Values.mountedConfig }}
            - name: {{ $name }}
              mountPath: {{ default "/config" $value.mountPath }}
              readOnly: true
          {{- end }}
          {{- /* volume mounts from dsb-azure-csi-key-vault-provider */ -}}
          {{- include "dackvp.render-kubernetes-volume-mounts" (list
            .Values.azureKeyVault.vaults
            .Values.azureKeyVault.defaultValues
            .Release.Name) | indent 12 }}
          securityContext:
            capabilities:
              drop: [ALL]
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 3000
      volumes:
        - name: tmp-dir
          emptyDir: {}
      {{- range $name, $value := .Values.certificates }}
        - name: {{ $name }}
          secret:
            secretName: {{ $name }}-file
      {{- end }}
      {{- range $name, $value := .Values.mountedConfig }}
        - name: {{ $name }}
          configMap:
            name: {{ $name }}-file
      {{- end }}
      {{- /* volumes from dsb-azure-csi-key-vault-provider */ -}}
      {{- include "dackvp.render-kubernetes-volumes" (list
        .Values.azureKeyVault.vaults
        .Values.azureKeyVault.defaultValues
        .Release.Name) | indent 8 }}
