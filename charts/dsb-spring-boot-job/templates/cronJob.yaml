---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  {{- if .Values.cronJobAnnotations }}
  annotations:
    {{- range $key, $val := .Values.cronJobAnnotations }}
      {{ $key }}: {{ $val | quote }}
      {{- end }}
  {{- end }}
spec:
  concurrencyPolicy: Forbid
  schedule: {{ .Values.schedule | quote }}
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 2
  jobTemplate:
    spec:
      completions: 1
      parallelism: 1
      backoffLimit: 3
      activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
      template:
        metadata:
          labels:
            app: {{ .Release.Name }}-job
          annotations:
            "apparmor.security.beta.kubernetes.io/pod": "runtime/default"
            # We change this annotation on change in chart or parameters, to force re-create of pods (to pick up config changes etc)
            # We create a string based on the chart version, and the resolved configuration values.
            # See https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
            checksum: "chart-version={{ .Chart.Version }}_config-hash={{ .Values | toString | sha256sum }}"
            co.elastic.logs/json.keys_under_root: "true"
            co.elastic.logs/json.overwrite_keys: "true"
            co.elastic.logs/json.add_error_key: "true"
        spec:
          restartPolicy: OnFailure
          nodeSelector:
            NodePool: workers
          containers:
            - image: "{{ .Values.image }}:{{ .Values.tag }}"
              name: {{ .Release.Name }}-job
              resources:
                requests:
                  memory: {{ .Values.memory_request }}
                  cpu: {{ .Values.cpu_request }}
                limits:
                  memory: {{ .Values.memory_limit }}
                  cpu: {{ .Values.cpu_limit }}
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: {{ .Values.springProfiles | quote }}
              {{- if .Values.database_container_enabled }}
                - name: DATABASE_CONTAINER_USER
                  # This is hardcoded in the image used:
                  value: "sa"
                - name: DATABASE_CONTAINER_PASSWORD
                  value: {{ .Values.database_container_password | quote }}
                - name: DATABASE_CONTAINER_HOST_AND_PORT
                  value: {{ .Release.Name }}-db-svc:1433
                - name: DATABASE_CONTAINER_DATABASE
                # This is hardcoded in the image used:
                  value: "emptydb"
              {{- end }}
              envFrom:
              {{- range .Values.secretRefs }}
              - secretRef:
                  name: {{ . | quote }}
              {{- end }}
              # We place config AFTER secrets, to more easily override with dummy values during development:
              {{- range .Values.configMapRefs }}
              - configMapRef:
                  name: {{ . | quote }}
              {{- end }}
              {{- if .Values.config  }}
              - configMapRef:
                  name: {{ .Release.Name }}-configmap
              {{- end }}
              volumeMounts:
                - mountPath: /tmp
                  name: tmp-dir
              securityContext:
                capabilities:
                  drop: [ALL]
                privileged: false
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 1000
                runAsGroup: 3000
          volumes:
            - name: tmp-dir
              emptyDir: {}
