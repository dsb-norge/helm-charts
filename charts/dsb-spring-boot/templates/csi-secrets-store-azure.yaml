{{/*
  -----------------------------------------------------------------------------------
  This file enables support for Azure Key Vault Provider for Secrets Store CSI driver
  ie. mounting objects from Azure Key Vaults as files and/or environment variables.
  -----------------------------------------------------------------------------------
*/}}

{{- if .Values.azureKeyVault -}}

{{- if not (kindIs "map" .Values.azureKeyVault.vaults ) -}}
  {{ fail (printf "ERROR: 'vaults' key is required in .azureKeyVault definition with type 'map'.") }}
{{- end -}}

{{- if not (kindIs "map" ( .Values.global.azureKeyVaultDefaultValues | default .Values.azureKeyVault.defaultValues ) ) -}}
  {{ fail (printf "ERROR: 'defaultValues' key is required in .azureKeyVault definition with type 'map'.") }}
{{- end -}}

{{/* loop over keyvaults */}}
{{- $vaultsWithDefaultValues := (include "dackvp.vaults-enriched" (list
  .Values.azureKeyVault.vaults
  ( .Values.global.azureKeyVaultDefaultValues | default .Values.azureKeyVault.defaultValues )
  .Release.Name) | fromYaml).output -}}
{{- range $vaultKey, $vaultDef := $vaultsWithDefaultValues -}}

{{- if (include "dackvp.should-render-secrets-store-provider" (list $vaultKey $vaultDef) ) }}
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ $vaultDef.secretProviderClassName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
spec:
  provider: "azure"
  {{- if (include "dackvp.should-render-kubernetes-secrets-from-csi-provider" (list $vaultKey $vaultDef) ) -}}
  # create K8s secrets for those that should be mounted as environment variables
  secretObjects:
    - secretName: {{ $vaultDef.k8sSecretName | quote }}
      type: "Opaque"
      data:
    {{- (include "dackvp.render-kubernetes-secrets-data-block-in-csi-provider" (list $vaultKey $vaultDef)) | indent 8 }}
  {{- end -}}{{/* should render k8s secrets */}}
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true" # hardcode to use a user-assigned managed identity
    tenantID: {{ $vaultDef.tenantId | quote }} # the tenant ID of the key vault
    userAssignedIdentityID: {{ $vaultDef.clientId | quote }} # client ID of the user-assigned managed identity
    keyvaultName: {{ $vaultDef.kvName | quote }}
    objects: |
      array:
  {{- (include "dackvp.render-secrets-store-objects" (list $vaultKey $vaultDef)) | indent 8 }}
...
{{- if (include "dackvp.should-render-kubernetes-config-map-from-csi-provider" (list $vaultKey $vaultDef) ) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $vaultDef.k8sConfigMapName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
data:
  {{- $kvObjectTypes := (include "dackvp.get-kv-object-types" (list) | fromYaml).output -}}
  {{- range $objectType := $kvObjectTypes -}}
    {{- $objectsDef := (include "dackvp.get-kv-objects-to-mount-filepath-as-env" (list $vaultKey $vaultDef $objectType) | fromYaml).output -}}
    {{- range $object := $objectsDef }}
      {{- (dict $object.fileMountPathEnvName $object.volumeMountPath) | toYaml | nindent 2 }}
    {{- end -}}{{/* mount objects loop */}}
  {{- end -}}{{/* object types loop */}}
...
{{- end -}}{{/* should render kubernetes config map */}}
{{- end -}}{{/* should render secrets store provider */}}
{{- end -}}{{/* vaults loop */}}
{{- end -}}{{/* azureKeyVault is defined */}}