---
# global values
# in order to have global defaults across multiple charts, the following is supported:
#   'global.azureKeyVaultDefaultValues' if defined will take precedence over 'azureKeyVault.defaultValues'
global: {}

# Number of pods to create:
replicas: 2

# For the pod disruption budget, default is (replicas - 1):
minAvailableReplicas:

# Set to false to avoid creating PodDisruptionBudget for pods
createPodDisruptionBudget: true

# Container image ref for pods
image:

# Container image tag for pods
tag:

# Possibility to override default imagePullPolicy
imagePullPolicy:

# Annotations to put on the Deployment:
# deploymentAnnotations:
#  custom-key: "custom value"

# Annotations to put on every pod:
# Usage when applying with values.yaml
# podAnnotations:
#   my-custom-key: "my custom value"                  # add custom annotation
#   co.elastic.logs/json.message_key: "my_override"   # override a default
# To remove all defaults and not specify any annotations:
# podAnnotations: null                                # Note that using empty map {} will not work
podAnnotations:
  apparmor.security.beta.kubernetes.io/pod: "runtime/default"
  co.elastic.logs/json.keys_under_root: "true"
  co.elastic.logs/json.overwrite_keys: "true"
  co.elastic.logs/json.add_error_key: "true"

# Default Spring Profile:
springProfiles: "kubernetes"

# default is to not use workload identity
# if clientId is specified, workload identity will be enabled for the deployment
# the specified clientId must be an existing managed identity in the Azure tenant
azureWorkloadIdentity:
  clientId: ""

# It is possible to use a normal yaml tree here, for example:
# root:
#   node1: 1
#   node2: 2
#
# If there is a lot of config, it is useful to use the helm function --set-file.
config:

# Name of ConfigMap containing configuration files to mount into the pod
#
# Supplying this value will mount said ConfigMap into the pod and set the spring.config.additional-location environment variable accordingly
# Read more https://docs.spring.io/spring-boot/docs/3.2.2/reference/html/features.html#features.external-config.files
configurationConfigMap: ""

# Reference secrets that are mounted on the pod:
secretRefs: {}

# Mount certificates as files with additional environment variables to read them in applications
certificates: {}

# Reference configMaps that are mounted on the pod:
configMapRefs: {}

# Configuration of objects to mount from Azure Key Vault using Secrets Store CSI driver
azureKeyVault:
  # Values that are used if not explicitly defined for the KVs in 'vaults'
  # Normally ArgoCD will define these for a given runtime environment
  # if 'global.azureKeyVaultDefaultValues' is defined it will take precedence
  defaultValues: {}
    # tenantId: GUID # default value for tenant ID of the key vault(s)
    # clientId: GUID # default value for client id of the managed identity to use as identity when accessing key vault(s)
    # kvName: string # default value for name of the key vault(s)
  # Multiple vaults can be mounted simultaneously
  vaults: {}
    #  The below example definition does not explicitly define all required fields and thus requires 'defaultValues' above to be defined
    # minimalDef: # <-- friendly definition name, can be anything
    #   secrets:
    #     - nameInKv: name-of-my-secret # required
    #       mountAsEnv: "name.of.env.variable.holding.value.of.my.secret" # optional, this is the name of the env var containing the secret value inside the container
    #
    #  This example definition is explicit and does not require 'defaultValues' to be defined.
    #  It also shows various types of configurations supported.
    # exhaustiveDef:
    #   # tenant ID of the key vault
    #   tenantId: GUID
    #   # client id of the managed identity to use as identity when accessing key vaults objects,
    #   # client must have been given access through access policies or RBAC
    #   clientId: GUID
    #   # name of the key vault
    #   kvName: string
    #   keys: # <-- kv object types supported are keys, secrets and certs
    #     - nameInKv: name-of-key-in-vault                                            # required
    #       mountAsEnv: "name.of.env.variable.holding.key.in.pem.format"              # optional
    #       fileMountPathEnvName: "name.of.env.variable.holding.path.to.key.as.file"  # optional
    #       fileMountPath: "/custom/file/paths/are/supported"                         # optional
    #     - nameInKv: name-of-key-in-vault
    #       mountAsEnv: "the.same.object.can.be.mounted.as.multiple.vars"
    #     - nameInKv: name-of-key-in-vault
    #       fileMountPath: "/the/same/object/can/be/mounted/as/multiple/files"
    #     - nameInKv: name-of-another-key-in-vault
    #       mountAsEnv: "not_really_necessary_to_specify_fileMountPath"
    #   secrets:
    #     # keys, secrets and certs all support the same configuration parameters
    #     - nameInKv: name-of-secret-in-vault
    #       mountAsEnv: "name.of.env.variable.holding.value.of.secret"
    #       fileMountPathEnvName: "name.of.env.variable.holding.path.to.secret.as.file"
    #       fileMountPath: "/hardcoded/path/of/secret/as/file"
    #   certs:
    #     - nameInKv: name-of-cert-in-vault
    #       mountAsEnv: "name.of.env.variable.holding.cert.in.pem.format"
    #       fileMountPathEnvName: "name.of.env.variable.holding.path.to.cert.as.file"
    #       fileMountPath: "/hardcoded/path/of/cert/as/file"
    #
    #  This example shows additional details about how to work with certificates in Azure key vaults
    #  Note: When a Key Vault certificate is created, an addressable key and secret are also created with the same name.
    #        The Key Vault key allows key operations and the Key Vault secret allows retrieval of the certificate value
    #        as a secret. A Key Vault certificate also contains public x509 certificate metadata.
    #  The following assumes that a key vault _certificate_ object named "my-cert" exists in the key vault
    #  'defaultValues' are used for tenant id, client id and name of key vault
    # kvWithCert:
    #
    #   # Obtain the certificate
    #   # Note: For chain of certificates, using object type cert only returns the Server certificate and not the entire chain.
    #   certs:
    #     - nameInKv: my-cert
    #       mountAsEnv: "name.of.env.variable.holding.my-cert.in.pem.format"
    #
    #   # Obtain the public key: the public key is stored in a Key Vault key, we can retrieve it by using object type key
    #   keys:
    #     - nameInKv: my-cert
    #       mountAsEnv: "name.of.env.variable.holding.public.key.of.my-cert.in.pem.format"
    #
    #   # Obtain the private key and certificate
    #   # the private key is stored in a Key Vault secret with the public certificate included, it can be retrieve by using object type secret
    #   # Note: For chain of certificates, using object type secret returns entire certificate chain along with the private key.
    #   secrets:
    #     - nameInKv: my-cert
    #       mountAsEnv: "name.of.env.variable.holding.private.key.and.entire.chain.of.my-cert.in.pem.format"
    #     # Secrets also supports two additional parameters to help with mounting certificates in containers
    #     #  fileMountFormat - default is "pem",    must be one of ["pem", "pfx"]
    #     #  secretEncoding  - default is "utf-8",  must be one of ["utf-8", "hex", "base64"]
    #     # Here is how to mount the entire certificate chain along with the private key in binary pfx format:
    #     - nameInKv: my-cert
    #       fileMountFormat: pfx
    #       secretEncoding: base64
    #       fileMountPath: "/path/of/my-cert.pfx"

# if enabled, a blob storage account and storage container is dynamically provisioned by AKS and mounted in the pod
azurePersistentStorage:
  enabled: false                        # default is no storage
  isEphemeral: false                    # set to true to make AKS deprovision the storage container as soon as no deployments are using it
  size: 100Gi                           # how much storage to provision
  mountPath: "/mnt/azure-blob-storage"  # where to mount the storage container in the pod
  # type of storage account to use:
  #   - Standard_LRS: Standard Locally Redundant Storage
  #   - Premium_LRS: Premium Locally Redundant Storage
  #   - Standard_GRS: Standard Geo-Redundant Storage
  #   - Standard_RAGRS: Standard Read-Access Geo-Redundant Storage
  # default for non-ephemeral storage is Standard_GRS, ref. templates/blobStorage.yaml
  # default for ephemeral storage is Standard_LRS, ref. templates/blobStorage.yaml
  skuName: ""

# Hostname must be provided if Ingress should be enabled.
ingress_host:
ingress_path: /

application_web_port: 8080
application_actuator_port: 8180

prometheus_enabled: "false"
prometheus_path: "/actuator/prometheus"

memory_request: "512Mi"
memory_limit: "1024Mi"

cpu_request: "100m"
cpu_limit: "2.5"

# If this is enabled, a docker image with a mssql database is created.
# The following env variables are then added to the pod:
# DATABASE_CONTAINER_USER, DATABASE_CONTAINER_PASSWORD, DATABASE_CONTAINER_HOST_AND_PORT and DATABASE_CONTAINER_DATABASE
database_container:
  enabled: false
  image: "dsbacr.azurecr.io/dsb-norge/dsb-mssql-server:2019-latest"
  # Depends on what image is used:
  database: emptydb               # env: DATABASE_CONTAINER_DATABASE
  user: sa                        # env: DATABASE_CONTAINER_USER
  password: DoN0tUse1Production   # env: DATABASE_CONTAINER_PASSWORD

java_opts:

# The value which will populate the LANG environment variable in the pod
lang: "en_US.UTF-8"

# Headroom to specify to JVM memory calculator
# Percentage of total memory available which will be left unallocated to cover JVM overhead.
# Default is not specified ie. use paketo default.
#   ref. https://paketo.io/docs/howto/java/#configure-the-jvm-at-runtime
#   and https://github.com/cloudfoundry/java-buildpack-memory-calculator
jvm_head_room:

liveness_period_seconds: 15
liveness_failure_threshold: 20

readiness_period_seconds: 15
readiness_failure_threshold: 20

# Values giving recommended lables to resources. making them easier
# to recognize in different dashboard applications
#
# dashboard:
#   name:       The name of the application - Example: mysql - Default: Release Name
#   component:  The component within the architecture - Example: database - Default: API
#   partOf:     The name of a higher level application this one is part of - Example: wordpress - Default Release Name
dashboard: {}

rbac:
  enabled: false
  roles: {}

websocket:
  enabled: false
  port: 9091

shutdown:
  # Will set shutdown method to GRACEFUL for spring boot app
  # this will guarantee it will no longer accept new requests upon receiving SIGTERM,
  # but finishes processing all the ongoing requests (https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#web.graceful-shutdown)
  graceful: true
  # This is passed to 'spring.lifecycle.timeout-per-shutdown-phase' giving the graceful shutdown a timeout before forcing the shutdown
  timeoutPerShutdownPhase: 30s
  # This value is passed to kubernetes, it should be above the timeoutPerShutdownPhase to allow spring to do the shutdown before kubernetes forces it
  terminationGracePeriodSeconds: 45

cache:
  enabled: false
  image: "dsbacr.azurecr.io/cache/docker-io/library/redis"
  tag: "alpine"
  imagePullPolicy: "Always"
  memory_request: "128Mi"
  memory_limit: "512Mi"
  cpu_request: "0.1"
  cpu_limit: "0.5"
...
